// Each #kernel tells which function to compile; you can have many kernels
#pragma enable_d3d11_debug_symbols
#pragma kernel Gravity

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture


//Input 
extern shared RWStructuredBuffer<float3> _translations;
extern shared RWStructuredBuffer<float3> _velocities;extern shared RWStructuredBuffer<float> _masses;
extern int objectCount;
extern float dt;


//Output 
RWStructuredBuffer<float3> _velocitiesOutput;

double calcGrav(float3 posA, float3 posB, float massA, float massB);



[numthreads(1024,1,1)]
void Gravity (uint3 id : SV_DispatchThreadID)
{
	/*float y = 40;
	float z = 50;
	_velocitiesOutput[id * 3] = float3(id,20,30).xyz;
	_velocitiesOutput[(id * 3) + 1] = y;
	_velocitiesOutput[(id * 3) + 2] = z;*/


	/*float3 _out(id.x, 20.0f, 30.0f);
	_velocitiesoutput[id.x].y = 20;
	_velocitiesoutput[id.x].z = 30;*/
	
	_velocitiesOutput[id.x] = _velocities[id.x];
	
	for (int i = 0; i < objectCount; i++) {

		float3 temDist = _translations[id.x] - _translations[i];

		float distanceCarre = ((temDist.x*temDist.x) + (temDist.y*temDist.y)  +(temDist.z*temDist.z)) + 0.0001f;

		_velocitiesOutput[id.x] -=  temDist / (distanceCarre);



		//double f = calcGrav(_translations[i], _translations[id.x], _masses[i], _masses[id.x]);

		////float3 dirf = normalize((_translations[i] - _translations[id.x]) + float3(0.0001f, 0.0001f, 0.0001f)) * f;
		//float dirf = f / (f *f);

		//_velocitiesOutput[id.x] += dirf;
	}
	


	//_velocitiesOutput[id.x] = float3(10.0f,20.0f,30.0f);
	//_velocitiesOutput[id.x] += 10;
}


double calcGrav(float3 posA, float3 posB, float massA, float massB) {

	//double G = 0.0000000000667408;
	//double G = 1;
	double d = distance(posB, posA);
	/*d = d * d;

	double f = (G * (double)massA * (double)massB) / d;
*/
	return d;
}
